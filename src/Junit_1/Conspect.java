package Junit_1;

public class Conspect {

}
    /**
     *                         Test Case(сценарий тестирования)
     *  Артефакт,описывающий совокупность шагов,конкретных условий и параметров,необходимых для
     *  реализации тестируемой функции или ее части.
     *
     *
     *  Под Test Case понимают конструкцию вида: Action>Expected Result>Test Result
     *                                          действие>ожидаемый результат>Результат Теста
     *
     * Пример: Open page "login">Login page is opened>Passed
     *
     *
     *
     *                 Уровни тестирования
     *
     * Модульное тестирование:(наш выбор для программиста)
     * -проверка работы программы на уровне отдельных модулей(классов,методов)
     *
     * Интеграционное тестирование:
     * -проверка совместной работы нескольких модулей
     *
     * Системное тестирование:
     * -проверка работы системы в целом
     *
     *
     * Модульное(unit)тестирование
     * Процесс проверки корректности работы отдельных частей исходного кода(чаще всего методов)
     * программы путем запуска тестов в искусственной среде
     *
     * Что делает тест:
     * 1. Воспроизводит некоторые данные\делает предварительные действия.
     * 2. Выполняет тестируемый метод,правильный результат работы которого очевиден автору теста.
     * 3. Выполняет сопоставление полученного результата с ожидаемым(assert)
     * Если ожидание и реальность совпадают-тест пройден.
     * Если нет-тест провален. Чаще всего генерируется специальное исключение AssertionError
     *
     *
     * Зачем нужно модульное тестирование
     * Разработчик создает методы и классы для конкретных целей
     *
     * Снижается число новых ошибок при добавлении новой функциональности
     *
     * Тест отражает элементы технического задания(некорректное завершение теста сообщает о
     * нарушении технических требований заказчика)
     * ......................................................................................
     *
     *                           Правила тестирования
     *
     * 1.Каждый тестовый сценарий(test case)- отдельный метод.
     * Методы необходимо помечать аннотацией @Test
     *
     * 2.Существуют вспомогательные методы в аннотациях @Before,@BeforeClass,@After,@AfterClass
     *
     * 3. Тестируемый класс необходимо назвать с суффиксом Test(например Vector2DTest)
     *
     * 4.Тестовые методы желательно должны содержать should в названии(например sumShouldBePositive)
     * ...........................................................................................
     * Аннотация @Test
     * Объявляет метод(обязательно public void) тестовым
     *
     * Аннотация @Test может использовать параметры:
     * expected- код в тесте проверяется на генерацию определенного исключения
     *
     * timeout- код в тесте должен работать не более указанного времени(иначе тест завален)
     * ............................................................................................
     *                           org.junit.Assert
     *
     * проверка ожидание\реальность(expected/actual)
     *
     * Методы:
     * assertTrue()                метод вернул значение True
     * assertFalse()               метод вернул значение False
     * assertEquals()              фактический результат метода равен ожидаемому результату
     * assertArrayEquals()         тоже самое что assertEquals,но для массивов
     * assertNotEquals()           фактический результат не равен ожидаемому результату
     * assertSame()
     * assertNotSame
     *
     * fail-гарантированное падение теста
     *
     * /////////////////////////////////////////////////////////////////////////////////////////////////
     *                               Ignore and Assume
     *
     *  Тест, помеченный @Ignore,не выполняется
     *  Лучше это не использовать.
     *
     *  Вместо Assert можно использовать Assume(с методами assumeFalse, assumeEquals и тд)
     *  С Assume:
     *  Если проверка верна-тест пройден.
     *  Если проверка не верна-тест игнорируется.
     *  ........................................................................................
     *  Вспомогательные методы:
     * @BeforeClass - запускается только один раз при запуске теста(static).
     * @Before - запускается перед каждым тестовым методом.
     * @After - запускается перед каждым методом.
     * @AfterClass - запускается один раз после того, как отработали все тестовые методы(static).
     *
     * В этих классах мы можем производить какие либо пост тестовые задачи,например закрывать соединения,если были
     * подключены к удаленному серверу, чистить ресурсы и тд.
     * ....................................................................................................
     * Жизненный цикл тестирующего класса:
     * 1. @BeforeClass
     *
     * 2. Для каждого @Test-метода:
     * - создание экземпляра тестового класса(объект)
     * - @Before(будет запускаться для каждого объекта тестового метода)
     * - @Test(запускается сам тестовый метод)
     * - @After(после теста запускается для каждого объекта тестового метода)
     *
     * 3. @AfterClass
     *
     * @Before и @After принадлежать объекту класса. Тестовому методу.
     * @BeforeClass и @AfterClass принадлежат в свою очередь самому классу. Они являются статическими и запускаются один
     * раз
     * После выполнения всех тестовых методов, запускается @AfterClass
     *
     */

